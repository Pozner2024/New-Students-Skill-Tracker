const { PrismaClient } = require('@prisma/client');

async function checkDatabaseStructure() {
  const prisma = new PrismaClient();
  
  try {
    console.log('üîç Checking database structure...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await prisma.$connect();
    console.log('‚úÖ Database connected successfully');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users
    console.log('\nüìã Checking users table structure...');
    
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
      const user = await prisma.user.findFirst();
      
      if (user) {
        console.log('‚úÖ Users table exists and accessible');
        console.log('üìä Sample user structure:', {
          id: user.id,
          email: user.email,
          fullName: user.fullName,
          groupNumber: user.groupNumber,
          hasFullName: 'fullName' in user,
          hasGroupNumber: 'groupNumber' in user
        });
      } else {
        console.log('‚ö†Ô∏è Users table exists but is empty');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
      console.log('\nüß™ Testing user creation with new fields...');
      const testUser = await prisma.user.create({
        data: {
          email: `test${Date.now()}@example.com`,
          password: 'hashed_password',
          fullName: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          groupNumber: '–ì–†-2024-01'
        }
      });
      
      console.log('‚úÖ User created successfully with new fields:', {
        id: testUser.id,
        email: testUser.email,
        fullName: testUser.fullName,
        groupNumber: testUser.groupNumber
      });
      
      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await prisma.user.delete({
        where: { id: testUser.id }
      });
      console.log('üóëÔ∏è Test user deleted');
      
    } catch (error) {
      if (error.message.includes('Unknown column') || error.message.includes('column') && error.message.includes('does not exist')) {
        console.log('‚ùå Database structure is outdated. New columns are missing.');
        console.log('üí° Run: npx prisma db push');
      } else {
        console.error('‚ùå Error checking database structure:', error.message);
      }
    }
    
  } catch (error) {
    console.error('‚ùå Database connection error:', error.message);
    console.log('üí° Make sure:');
    console.log('   1. PostgreSQL is running');
    console.log('   2. DATABASE_URL is set correctly');
    console.log('   3. Database exists');
  } finally {
    await prisma.$disconnect();
  }
}

checkDatabaseStructure();
