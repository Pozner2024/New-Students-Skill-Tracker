const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkTestsData() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤
    const totalTests = await prisma.tests.count();
    console.log(`üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤: ${totalTests}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è —Ç–µ–º—ã 5
    const test5Tests = await prisma.tests.findMany({
      where: {
        test_code: {
          startsWith: 'test5_'
        }
      }
    });
    
    console.log(`üìã –¢–µ—Å—Ç—ã –¥–ª—è —Ç–µ–º—ã 5:`);
    test5Tests.forEach(test => {
      console.log(`  - ${test.test_code} (–≤–∞—Ä–∏–∞–Ω—Ç ${test.variant}): ${test.test_title}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ test5_2
    const test5_2 = await prisma.tests.findFirst({
      where: {
        test_code: 'test5_2',
        variant: 2
      }
    });
    
    if (test5_2) {
      console.log(`‚úÖ –¢–µ—Å—Ç test5_2 –≤–∞—Ä–∏–∞–Ω—Ç 2 –Ω–∞–π–¥–µ–Ω:`);
      console.log(`  - ID: ${test5_2.id}`);
      console.log(`  - –ù–∞–∑–≤–∞–Ω–∏–µ: ${test5_2.test_title}`);
      console.log(`  - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${JSON.parse(test5_2.questions).questions.length}`);
    } else {
      console.log(`‚ùå –¢–µ—Å—Ç test5_2 –≤–∞—Ä–∏–∞–Ω—Ç 2 –ù–ï –Ω–∞–π–¥–µ–Ω!`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–æ–º 2
    const variant2Tests = await prisma.tests.findMany({
      where: {
        variant: 2
      }
    });
    
    console.log(`üìã –í—Å–µ —Ç–µ—Å—Ç—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–æ–º 2:`);
    variant2Tests.forEach(test => {
      console.log(`  - ${test.test_code}: ${test.test_title}`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkTestsData();
