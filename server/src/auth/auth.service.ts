import { Injectable, ConflictException, UnauthorizedException } from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import * as bcrypt from 'bcryptjs';
import { PrismaService } from '../prisma/prisma.service';
import { RegisterDto, LoginDto } from './dto/auth.dto';
import { UpdateProfileDto } from './dto/update-profile.dto';

@Injectable()
export class AuthService {
  constructor(
    private prisma: PrismaService,
    private jwtService: JwtService,
  ) {}

  async register(registerDto: RegisterDto) {
    try {
      console.log('üîê Register attempt:', { email: registerDto.email });
      const { email, password } = registerDto;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      console.log('üîç Checking if user exists...');
      const existingUser = await this.prisma.user.findUnique({
        where: { email },
      });

      if (existingUser) {
        console.log('‚ùå User already exists');
        throw new ConflictException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      }

      // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
      console.log('üîí Hashing password...');
      const hashedPassword = await bcrypt.hash(password, 10);

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log('üë§ Creating user...');
      const user = await this.prisma.user.create({
        data: {
          email,
          password: hashedPassword,
        },
      });

      console.log('‚úÖ User created successfully:', { id: user.id, email: user.email });

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
      console.log('üé´ Generating JWT token...');
      const payload = { sub: user.id, email: user.email };
      const token = this.jwtService.sign(payload);

      console.log('üéâ Registration completed successfully');
      return {
        access_token: token,
        user: {
          id: user.id,
          email: user.email,
        },
      };
    } catch (error) {
      console.error('‚ùå Registration error:', error);
      throw error;
    }
  }

  async login(loginDto: LoginDto) {
    const { email, password } = loginDto;

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await this.prisma.user.findUnique({
      where: { email },
    });

    if (!user) {
      throw new UnauthorizedException('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      throw new UnauthorizedException('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
    const payload = { sub: user.id, email: user.email };
    const token = this.jwtService.sign(payload);

    return {
      access_token: token,
      user: {
        id: user.id,
        email: user.email,
      },
    };
  }

  async validateUser(payload: any) {
    try {
      console.log('üîç Validating user with payload:', payload);
      const user = await this.prisma.user.findUnique({
        where: { id: payload.sub },
      });

      if (user) {
        console.log('‚úÖ User found:', { id: user.id, email: user.email });
        return {
          id: user.id,
          email: user.email,
        };
      }
      console.log('‚ùå User not found');
      return null;
    } catch (error) {
      console.error('‚ùå Error validating user:', error);
      return null;
    }
  }

  async getUserById(id: number) {
    try {
      console.log('üîç Getting user by ID:', id);
      const user = await this.prisma.user.findUnique({
        where: { id },
      });

      if (user) {
        console.log('‚úÖ User found by ID:', { id: user.id, email: user.email });
        return user;
      }
      console.log('‚ùå User not found by ID');
      return null;
    } catch (error) {
      console.error('‚ùå Error getting user by ID:', error);
      return null;
    }
  }

  async updateProfile(userId: number, updateProfileDto: UpdateProfileDto) {
    try {
      console.log('üë§ Updating profile for user:', userId, updateProfileDto);

      const updatedUser = await this.prisma.user.update({
        where: { id: userId },
        data: {
          fullName: updateProfileDto.fullName,
          groupNumber: updateProfileDto.groupNumber,
        },
      });

      console.log('‚úÖ Profile updated successfully:', {
        id: updatedUser.id,
        email: updatedUser.email,
        fullName: updatedUser.fullName,
        groupNumber: updatedUser.groupNumber
      });

      return {
        id: updatedUser.id,
        email: updatedUser.email,
        fullName: updatedUser.fullName,
        groupNumber: updatedUser.groupNumber,
      };
    } catch (error) {
      console.error('‚ùå Error updating profile:', error);
      throw error;
    }
  }

  async getUserTestResults(userId: number) {
    try {
      console.log('üìä Getting test results for user:', userId);

      const testResults = await this.prisma.testResult.findMany({
        where: { user_id: userId },
        orderBy: { completed_at: 'desc' },
      });

      console.log('‚úÖ Test results retrieved:', testResults.length, 'results');

      return testResults;
    } catch (error) {
      console.error('‚ùå Error getting test results:', error);
      throw error;
    }
  }

  async saveTestResult(userId: number, testResultData: any) {
    try {
      console.log('üíæ Saving test result for user:', userId, testResultData);

      const { testCode, variant, score, totalQuestions, percentage } = testResultData;

      const savedResult = await this.prisma.testResult.create({
        data: {
          user_id: userId,
          test_code: testCode,
          variant: variant,
          score: score,
          total_questions: totalQuestions,
          percentage: percentage,
        },
      });

      console.log('‚úÖ Test result saved successfully:', savedResult);

      return savedResult;
    } catch (error) {
      console.error('‚ùå Error saving test result:', error);
      throw error;
    }
  }
}
